CREATE TABLE TAB_FETCH
(ID INTEGER, NOME VARCHAR(10), VALOR VARCHAR(10));
INSERT INTO TAB_FETCH VALUES (1,'PRODUTO1',10);
INSERT INTO TAB_FETCH VALUES (2,'PRODUTO2',10);
INSERT INTO TAB_FETCH VALUES (3,'PRODUTO3',10);
INSERT INTO TAB_FETCH VALUES (4,'PRODUTO4',10);
INSERT INTO TAB_FETCH VALUES (5,'PRODUTO5',10);
INSERT INTO TAB_FETCH VALUES (6,'PRODUTO6',10);
INSERT INTO TAB_FETCH VALUES (7,'PRODUTO7',10);
INSERT INTO TAB_FETCH VALUES (8,'PRODUTO8',10);
INSERT INTO TAB_FETCH VALUES (9,'PRODUTO9',10);

EXECUTE INCLUIR_CLIENTE(30, 'Loja NNM','56854960854906',2,60000);


--------------------------------------------------------------------------------------------------------------------------------
-- PROCEDURE SP_SOMA_VENDAS_FOR A SOMA DAS VENDAS COM A AJUDA DE CURSORES E O LOOPING FOR
create or replace PROCEDURE SP_SOMA_VENDAS_FOR
(p_VENDA_LIMITE IN produto_venda_exercicio.valor_total%type, 
 p_ID_RETORNO OUT produto_venda_exercicio.id%type)
IS
   v_VALOR_TOTAL produto_venda_exercicio.valor_total%type;
   v_VENDA_TOTAL produto_venda_exercicio.valor_total%type := 0;
   CURSOR CUR_ID_VENDA IS SELECT ID FROM produto_venda_exercicio;
BEGIN
    FOR LINHA IN CUR_ID_VENDA LOOP
        SELECT VALOR_TOTAL INTO V_VALOR_TOTAL FROM produto_venda_exercicio WHERE ID = LINHA.ID;
        v_VENDA_TOTAL := v_VENDA_TOTAL + v_VALOR_TOTAL;
        p_ID_RETORNO := LINHA.ID;

        IF v_VENDA_TOTAL >= p_VENDA_LIMITE THEN
            EXIT;
        END IF;
    END LOOP;
END;



-- PROCEDURE SP_SOMA_VENDAS_FOR A SOMA DAS VENDAS COM A AJUDA DE CURSORES E O LOOPING WHILE
create or replace PROCEDURE SP_SOMA_VENDAS_WHILE
(p_VENDA_LIMITE IN produto_venda_exercicio.valor_total%type, 
 p_ID_RETORNO OUT produto_venda_exercicio.id%type)
IS
   v_ID produto_venda_exercicio.id%type := 1;
   v_VALOR_TOTAL produto_venda_exercicio.valor_total%type;
   v_VENDA_TOTAL produto_venda_exercicio.valor_total%type := 0;
   CURSOR CUR_ID_VENDA IS SELECT ID FROM produto_venda_exercicio;
BEGIN
    OPEN CUR_ID_VENDA;
    FETCH CUR_ID_VENDA INTO v_ID;
    WHILE ((v_VENDA_TOTAL < p_VENDA_LIMITE)AND CUR_ID_VENDA%FOUND) LOOP
        SELECT VALOR_TOTAL INTO V_VALOR_TOTAL FROM produto_venda_exercicio WHERE ID =V_ID;
        v_VENDA_TOTAL := v_VENDA_TOTAL + v_VALOR_TOTAL;
        
        IF v_VENDA_TOTAL < p_VENDA_LIMITE THEN
           FETCH CUR_ID_VENDA INTO v_ID;
        END IF;
    END LOOP;
    CLOSE CUR_ID_VENDA;
    p_ID_RETORNO := v_ID;
END;


-- PROCEDURE FORMATANDO_CNPJ FORMATA O CNOJ '***/**-****'
create or replace PROCEDURE FORMATANDO_CNPJ
(P_CNPJ IN CLIENTE.CNPJ%TYPE,
 P_CNPJ_SAIDA OUT CLIENTE.CNPJ%TYPE)
 IS
 BEGIN
    P_CNPJ_SAIDA := SUBSTR(P_CNPJ,1,3)|| '/'||SUBSTR(P_CNPJ,4,2)||'-'||SUBSTR(P_CNPJ,6);
 END;
 
 
-- PROCEDURE INCLUIR_CLIENTE
create or replace PROCEDURE INCLUIR_CLIENTE
(P_ID IN CLIENTE.ID%TYPE,
 P_RAZAO IN CLIENTE.RAZAO_SOCIAL%TYPE,
 P_CNPJ IN CLIENTE.CNPJ%TYPE,
 P_SEGMERCADO IN CLIENTE.SEGMERCADO_ID%TYPE,
 P_FATURAMENTO IN CLIENTE.FATURAMENTO_PREVISTO%TYPE)
IS
    v_CATEGORIA CLIENTE.CATEGORIA%TYPE;
    V_CPNJ CLIENTE.CNPJ%TYPE;
    eID_NULO exception;
    pragma exception_init(eID_NULO,-1400);
    e_faturamento_null exception;
BEGIN
    IF P_FATURAMENTO IS NULL THEN
        RAISE e_faturamento_null;
    END IF;
    
    FORMATANDO_CNPJ(P_CNPJ,V_CPNJ);
    v_CATEGORIA := CATEGORIA_CLIENTE(P_FATURAMENTO);

    INSERT INTO CLIENTE 
    VALUES(P_ID,P_RAZAO,V_CPNJ,P_SEGMERCADO,SYSDATE,P_FATURAMENTO,V_CATEGORIA);
    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
         RAISE_APPLICATION_ERROR(-20010,'CLIENTE JÁ CADASTRADO !!!!!');
        
    WHEN eID_nulo THEN
         RAISE_APPLICATION_ERROR(-20015, 'IDENTIFICADOR DO CLIENTE ESTÁ NULO!!');
    WHEN e_faturamento_null THEN
        RAISE_APPLICATION_ERROR(-20025, 'FATURAMENTO FOI INCLUIDO COM O VALOR NULO');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20014,'ERROR NÃO IDENTIDICADO!!. MENSAGEM DE ERROR: ' || sqlerrm());
END;

--PROCEDURE INCLUIR_SEGMERCADO
Create or replace PROCEDURE INCLUIR_SEGMERCADO
(P_ID IN SEGMERCADO.ID%TYPE,
 P_DESCRICAO IN SEGMERCADO.DESCRICAO%TYPE)

IS
BEGIN
    INSERT INTO SEGMERCADO VALUES(P_ID,UPPER(P_DESCRICAO));
    COMMIT;
END;

create or replace PROCEDURE SP_ATUALIZAR_VALOR_TOTAL_IMPOSTO 
IS
   v_ID produto_venda_exercicio.id%type := 1;
   v_NUMERO_VENDA INTEGER;
   v_COD_PRODUTO produto_venda_exercicio.cod_produto%type;
   v_VALOR produto_venda_exercicio.valor_total%type;
   v_QUANTIDADE produto_venda_exercicio.quantidade%type;
   v_PRECO produto_venda_exercicio.preco%type;
   v_PERCENTUAL produto_venda_exercicio.percentual_imposto%type;
BEGIN
   SELECT COUNT(*) INTO v_NUMERO_VENDA FROM PRODUTO_VENDA_EXERCICIO;
   WHILE v_ID <= v_NUMERO_VENDA LOOP
      SELECT COD_PRODUTO, QUANTIDADE, PRECO INTO v_COD_PRODUTO, v_QUANTIDADE, v_PRECO 
      FROM PRODUTO_VENDA_EXERCICIO WHERE ID = v_ID;
      v_PERCENTUAL := RETORNA_IMPOSTO(v_COD_PRODUTO);
      v_VALOR := v_QUANTIDADE * v_PRECO;
      UPDATE PRODUTO_VENDA_EXERCICIO SET VALOR_TOTAL = v_VALOR, PERCENTUAL_IMPOSTO = v_PERCENTUAL WHERE ID = v_ID;
      v_ID := v_ID + 1;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SP_NUMEROS_FIBONACCI_WHILE 
(p_INTERACOES IN FLOAT,
 p_NUMEROFIBO OUT FLOAT)
IS
   v_FIBO1 FLOAT := 0;
   v_FIBO2 FLOAT := 1;
   v_FIBO_ATUAL FLOAT := 0;
   v_CONTADOR FLOAT := 1;
   v_INTERACOES FLOAT := 1;
BEGIN
   IF p_INTERACOES > 1 THEN
      WHILE v_CONTADOR < p_INTERACOES LOOP
         v_FIBO_ATUAL := v_FIBO1 + v_FIBO2;
         v_FIBO1 := v_FIBO2;
         v_FIBO2 := v_FIBO_ATUAL;
         v_CONTADOR := v_CONTADOR + 1;
      END LOOP;
   END IF;
   p_NUMEROFIBO := v_FIBO_ATUAL;
END;


--  Declaração  de uso da SP_SOMA_VENDAS_WHILE
SET SERVEROUTPUT ON
DECLARE
    vNUM INTEGER;
BEGIN
    SP_SOMA_VENDAS_WHILE(20000,vNUM);
    DBMS_OUTPUT.PUT_LINE(vNUM);
END;

--  Declaração  de uso da SP_SOMA_VENDAS_FOR
SET SERVEROUTPUT ON
DECLARE
    vNUM INTEGER;
BEGIN 
    SP_SOMA_VENDAS_FOR(20000,vNUM);
    DBMS_OUTPUT.PUT_LINE(vNUM);
END;

--  CONSULTAS
SELECT * FROM CLIENTE;
SELECT * FROM PRODUTO_VENDA_EXERCICIO;
SELECT * FROM SEGMERCADO;

COMMIT;

