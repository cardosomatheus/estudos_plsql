SELECT
    max(numero)
FROM itens_notas_fiscais;

--          CONSULTAS COM JOINS 

-- inner joinn com duas tabelas
SELECT  NF.MATRICULA,
        TV.NOME,
        COUNT(*) AS NMR_NOTAS 
FROM NOTAS_FISCAIS NF
    INNER JOIN TABELA_DE_VENDEDORES TV
    ON NF.MATRICULA = TV.MATRICULA
GROUP BY NF.MATRICULA, TV.NOME;


-- Usando O HAVING em conjunto com o inner join

SELECT  INF.CODIGO_DO_PRODUTO, 
        TP.NOME_DO_PRODUTO,
        SUM(INF.QUANTIDADE)     
FROM ITENS_NOTAS_FISCAIS INF 
    INNER JOIN TABELA_DE_PRODUTOS TP
    ON INF.CODIGO_DO_PRODUTO  = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO
HAVING SUM(INF.QUANTIDADE) > 54000 
ORDER BY SUM(INF.QUANTIDADE) DESC;

-- Retornando o cliente que nunca fez uma compra na empresa
SELECT DISTINCT 
    TC.CPF  AS CPF_CADASTRO,
    TC.NOME AS NOME_CLIENTE   
FROM TABELA_DE_CLIENTES TC
LEFT JOIN NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF
WHERE NF.CPF IS NULL;


-- Vendedores que não possuem clientes em seu bairro
SELECT DISTINCT
    TV.NOME     AS NOME_VENDEDOR,
    TV.BAIRRO   AS BAIRRO_DO_VENDEDOR,
    TC.NOME     AS NOME_CLIENTE,
    TC.BAIRRO   AS BAIRRO_DO_CLIENTE
FROM TABELA_DE_CLIENTES TC
    RIGHT JOIN TABELA_DE_VENDEDORES TV
    ON TV.BAIRRO = TC.BAIRRO
WHERE TC.BAIRRO IS NULL;



-- CONSULTAS COM UNION

-- TOTAL DE BAIRRO ENTRE CLIENTES E FORNECEDORES
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES
UNION
SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES;

-- BAIRRO ENTRE CLIENTES E FORNECEDORES COM REGISTROS DUPLICADOS
SELECT DISTINCT BAIRRO, 'FORNECEDOR' AS ORIGEM FROM TABELA_DE_VENDEDORES
UNION ALL
SELECT DISTINCT BAIRRO, 'CLIENTE' AS ORIGEM FROM TABELA_DE_CLIENTES;